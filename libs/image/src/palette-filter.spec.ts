import { createPaletteFilter } from './palette-filter';
import { createIndexedPixelData } from './indexed-pixel-data';

describe('dither-filter', () => {
  it('should deindex colors based on the palette', () => {
    const img = createIndexedPixelData(4, 4);
    img.pixels[0x0] = 0x00;
    img.pixels[0x1] = 0x01;
    img.pixels[0x2] = 0x02;
    img.pixels[0x3] = 0x03;
    img.pixels[0x4] = 0x04;
    img.pixels[0x5] = 0x05;
    img.pixels[0x6] = 0x06;
    img.pixels[0x7] = 0x07;
    img.pixels[0x8] = 0x08;
    img.pixels[0x9] = 0x09;
    img.pixels[0xa] = 0x0a;
    img.pixels[0xb] = 0x0b;
    img.pixels[0xc] = 0x0c;
    img.pixels[0xd] = 0x0d;
    img.pixels[0xe] = 0x0e;
    img.pixels[0xf] = 0x0f;

    const filter = createPaletteFilter(
      Uint32Array.of(
        //AA BB GG RR
        0xff_00_00_00,
        0xff_aa_00_00,
        0xff_00_aa_00,
        0xff_aa_aa_00,
        0xff_00_00_aa,
        0xff_aa_00_aa,
        0xff_00_55_aa,
        0xff_aa_aa_aa,

        0xff_55_55_55,
        0xff_ff_55_55,
        0xff_55_ff_55,
        0xff_ff_ff_55,
        0xff_55_55_ff,
        0xff_ff_55_ff,
        0xff_55_ff_ff,
        0xff_ff_ff_ff,
      ),
    );

    const result = filter(img);
    expect(result.data).toEqual(
      // prettier-ignore
      Uint8ClampedArray.of(
        0x00, 0x00, 0x00, 0xff,
        0x00, 0x00, 0xaa, 0xff,
        0x00, 0xaa, 0x00, 0xff,
        0x00, 0xaa, 0xaa, 0xff,
        0xaa, 0x00, 0x00, 0xff,
        0xaa, 0x00, 0xaa, 0xff,
        0xaa, 0x55, 0x00, 0xff,
        0xaa, 0xaa, 0xaa, 0xff,

        0x55, 0x55, 0x55, 0xff,
        0x55, 0x55, 0xff, 0xff,
        0x55, 0xff, 0x55, 0xff,
        0x55, 0xff, 0xff, 0xff,
        0xff, 0x55, 0x55, 0xff,
        0xff, 0x55, 0xff, 0xff,
        0xff, 0xff, 0x55, 0xff,
        0xff, 0xff, 0xff, 0xff,
      ),
    );
  });

  it('should resepect keyColor', () => {
    const img = createIndexedPixelData(4, 4, { keyColor: 0xd });
    img.pixels[0x0] = 0x0d;
    img.pixels[0x1] = 0x0f;
    img.pixels[0x2] = 0x0f;
    img.pixels[0x3] = 0x0d;

    img.pixels[0x4] = 0x0f;
    img.pixels[0x5] = 0x0f;
    img.pixels[0x6] = 0x0f;
    img.pixels[0x7] = 0x0f;

    img.pixels[0x8] = 0x0f;
    img.pixels[0x9] = 0x0f;
    img.pixels[0xa] = 0x0f;
    img.pixels[0xb] = 0x0f;

    img.pixels[0xc] = 0x0d;
    img.pixels[0xd] = 0x0f;
    img.pixels[0xe] = 0x0f;
    img.pixels[0xf] = 0x0d;

    const filter = createPaletteFilter(
      Uint32Array.of(
        //AA BB GG RR
        0xff_00_00_00,
        0xff_aa_00_00,
        0xff_00_aa_00,
        0xff_aa_aa_00,
        0xff_00_00_aa,
        0xff_aa_00_aa,
        0xff_00_55_aa,
        0xff_aa_aa_aa,

        0xff_55_55_55,
        0xff_ff_55_55,
        0xff_55_ff_55,
        0xff_ff_ff_55,
        0xff_55_55_ff,
        0xff_ff_55_ff,
        0xff_55_ff_ff,
        0xff_ff_ff_ff,
      ),
    );

    const result = filter(img);
    expect(result.data).toEqual(
      // prettier-ignore
      Uint8ClampedArray.of(
        0x00, 0x00, 0x00, 0x00,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x00, 0x00,

        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,

        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,

        0x00, 0x00, 0x00, 0x00,
        0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x00, 0x00,
      ),
    );
  });
});
